#include "PF1550.h"

// DeviceInfo.h
const uint8_t DeviceId::kRegister = 0x00;
const DeviceId::DeviceIdMask DeviceId::kDeviceIdMask(BITS_2_1_0);
const uint8_t DeviceId::DeviceIdMask::kPF1550Mask = BITS_2;
const uint8_t DeviceId::DeviceIdMask::kPF1500Mask = BITS_NONE;

const uint8_t OTPFlavor::kRegister = 0x01;
const OTPFlavor::ModelMask OTPFlavor::kModelMask(BITS_ALL);
const uint8_t OTPFlavor::ModelMask::A0 = 0x00;
const uint8_t OTPFlavor::ModelMask::A1 = 0x01;
const uint8_t OTPFlavor::ModelMask::A2 = 0x02;
const uint8_t OTPFlavor::ModelMask::A3 = 0x03;
const uint8_t OTPFlavor::ModelMask::A4 = 0x04;
const uint8_t OTPFlavor::ModelMask::A5 = 0x05;
const uint8_t OTPFlavor::ModelMask::A6 = 0x06;
const uint8_t OTPFlavor::ModelMask::A7 = 0x07;
const uint8_t OTPFlavor::ModelMask::A8 = 0x08;
const uint8_t OTPFlavor::ModelMask::A9 = 0x09;

const uint8_t SiliconRev::kRegister = 0x02;
const SiliconRev::MetalLayerRevMask SiliconRev::kMetalLayerRevMask(BITS_2_1_0);
const SiliconRev::FullLayerRevMask SiliconRev::kFullLayerRevMask(BITS_5_4_3);
const SiliconRev::FabFinMask SiliconRev::kFabFinMask(BITS_7_6);

const uint8_t StateInfo::kRegister = 0x67;
const StateInfo::StateMask StateInfo::kStateMask(BITS_ALL);
const uint8_t StateInfo::StateMask::WAIT = BITS_NONE;
const uint8_t StateInfo::StateMask::RUN = BITS_3_2;
const uint8_t StateInfo::StateMask::STANDBY = BITS_3_2_0;
const uint8_t StateInfo::StateMask::SLEEP = BITS_3_2_1;
const uint8_t StateInfo::StateMask::REG_DISABLE = BITS_5_3_1_0;

const uint8_t I2CAddr::kRegister = 0x68;
const I2CAddr::AddrMask I2CAddr::kAddrMask(BITS_2_1_0);
const uint8_t I2CAddr::AddrMask::DEFAULT = 0x08;
const uint8_t I2CAddr::AddrMask::X08 = BITS_NONE;
const uint8_t I2CAddr::AddrMask::X09 = BITS_0;
const uint8_t I2CAddr::AddrMask::X0A = BITS_1;
const uint8_t I2CAddr::AddrMask::X0B = BITS_1_0;
const uint8_t I2CAddr::AddrMask::X0C = BITS_2;
const uint8_t I2CAddr::AddrMask::X0D = BITS_2_0;
const uint8_t I2CAddr::AddrMask::X0E = BITS_2_1;
const uint8_t I2CAddr::AddrMask::X0F = BITS_2_1_0;

const uint8_t RC16Mhz::kRegister = 0x6B;
const RC16Mhz::Req16MhzMask RC16Mhz::kReq16MhzMask(BITS_0);
const uint8_t RC16Mhz::Req16MhzMask::ALWAYS_ON = BITS_1;
const uint8_t RC16Mhz::Req16MhzMask::STATEMACHINE_EN = BITS_NONE;
const RC16Mhz::ReqAcoreOnMask RC16Mhz::kReqAcoreOnMask(BITS_1);
const uint8_t RC16Mhz::ReqAcoreOnMask::ALWAYS_ON = BITS_1;
const uint8_t RC16Mhz::ReqAcoreOnMask::STATEMACHINE_EN = BITS_NONE;
const RC16Mhz::ReqAcoreHiPwrMask RC16Mhz::kReqAcoreHiPwrMask(BITS_2);
const uint8_t RC16Mhz::ReqAcoreHiPwrMask::LOW_POWER_STATEMACHINE_CONTROLLED =
    BITS_NONE;
const uint8_t RC16Mhz::ReqAcoreHiPwrMask::LOW_POWER_NEVER = BITS_2;
// End DeviceInfo.h

// Misc.h
const uint8_t IntCategory::kRegister = 0x06;
const IntCategory::ChgIntMask IntCategory::kChgIntMask(BITS_0);
const uint8_t IntCategory::ChgIntMask::CLEAR = BITS_NONE;
const uint8_t IntCategory::ChgIntMask::OR_BITS = BITS_0;
const IntCategory::Sw1IntMask IntCategory::kSw1IntMask(BITS_1);
const uint8_t IntCategory::Sw1IntMask::CLEAR = BITS_NONE;
const uint8_t IntCategory::Sw1IntMask::ANY = BITS_1;
const IntCategory::Sw2IntMask IntCategory::kSw2IntMask(BITS_2);
const uint8_t IntCategory::Sw2IntMask::CLEAR = BITS_NONE;
const uint8_t IntCategory::Sw2IntMask::ANY = BITS_2;
const IntCategory::Sw3IntMask IntCategory::kSw3IntMask(BITS_3);
const uint8_t IntCategory::Sw3IntMask::CLEAR = BITS_NONE;
const uint8_t IntCategory::Sw3IntMask::ANY = BITS_3;
const IntCategory::LdoIntMask IntCategory::kLdoIntMask(BITS_4);
const uint8_t IntCategory::LdoIntMask::CLEAR = BITS_NONE;
const uint8_t IntCategory::LdoIntMask::ANY = BITS_4;
const IntCategory::OnkeyIntMask IntCategory::kOnkeyIntMask(BITS_5);
const uint8_t IntCategory::OnkeyIntMask::CLEAR = BITS_NONE;
const uint8_t IntCategory::OnkeyIntMask::ANY = BITS_5;
const IntCategory::TempIntMask IntCategory::kTempIntMask(BITS_6);
const uint8_t IntCategory::TempIntMask::CLEAR = BITS_NONE;
const uint8_t IntCategory::TempIntMask::ANY = BITS_6;
const IntCategory::MiscIntMask IntCategory::kMiscIntMask(BITS_7);
const uint8_t IntCategory::MiscIntMask::CLEAR = BITS_NONE;
const uint8_t IntCategory::MiscIntMask::ANY = BITS_7;

const uint8_t TempIntStat0::kRegister = 0x20;
const TempIntStat0::Therm110IMask TempIntStat0::kTherm110IMask(BITS_0);
const uint8_t TempIntStat0::Therm110IMask::CLEARED = BITS_NONE;
const uint8_t TempIntStat0::Therm110IMask::ACTIVE = BITS_0;
const TempIntStat0::Therm125IMask TempIntStat0::kTherm125IMask(BITS_2);
const uint8_t TempIntStat0::Therm125IMask::CLEARED = BITS_NONE;
const uint8_t TempIntStat0::Therm125IMask::ACTIVE = BITS_0;

const uint8_t TempIntMask0::kRegister = 0x21;
const TempIntMask0::Therm110MMask TempIntMask0::kTherm110MMask(BITS_0);
const uint8_t TempIntMask0::Therm110MMask::REMOVED = BITS_NONE;
const uint8_t TempIntMask0::Therm110MMask::ENABLED = BITS_0;
const TempIntMask0::Therm125MMask TempIntMask0::kTherm125MMask(BITS_2);
const uint8_t TempIntMask0::Therm125MMask::REMOVED = BITS_NONE;
const uint8_t TempIntMask0::Therm125MMask::ENABLED = BITS_0;

const uint8_t TempIntSense0::kRegister = 0x22;
const TempIntSense0::Therm110SMask TempIntSense0::kTherm110SMask(BITS_0);
const uint8_t TempIntSense0::Therm110SMask::BELOW = BITS_NONE;
const uint8_t TempIntSense0::Therm110SMask::ABOVE = BITS_0;
const TempIntSense0::Therm125SMask TempIntSense0::kTherm125SMask(BITS_2);
const uint8_t TempIntSense0::Therm125SMask::BELOW = BITS_NONE;
const uint8_t TempIntSense0::Therm125SMask::ABOVE = BITS_0;

const uint8_t OnkeyIntStat0::kRegister = 0x24;
const OnkeyIntStat0::OnkeyPushIMask OnkeyIntStat0::kOnkeyPushIMask(BITS_0);
const uint8_t OnkeyIntStat0::OnkeyPushIMask::CLEARED = BITS_NONE;
const uint8_t OnkeyIntStat0::OnkeyPushIMask::ACTIVE = BITS_0;
const OnkeyIntStat0::Onkey1SIMask OnkeyIntStat0::kOnkey1SIMask(BITS_1);
const uint8_t OnkeyIntStat0::Onkey1SIMask::CLEARED = BITS_NONE;
const uint8_t OnkeyIntStat0::Onkey1SIMask::ACTIVE = BITS_1;
const OnkeyIntStat0::Onkey2SIMask OnkeyIntStat0::kOnkey2SIMask(BITS_2);
const uint8_t OnkeyIntStat0::Onkey2SIMask::CLEARED = BITS_NONE;
const uint8_t OnkeyIntStat0::Onkey2SIMask::ACTIVE = BITS_2;
const OnkeyIntStat0::Onkey3SIMask OnkeyIntStat0::kOnkey3SIMask(BITS_3);
const uint8_t OnkeyIntStat0::Onkey3SIMask::CLEARED = BITS_NONE;
const uint8_t OnkeyIntStat0::Onkey3SIMask::ACTIVE = BITS_3;
const OnkeyIntStat0::Onkey4SIMask OnkeyIntStat0::kOnkey4SIMask(BITS_4);
const uint8_t OnkeyIntStat0::Onkey4SIMask::CLEARED = BITS_NONE;
const uint8_t OnkeyIntStat0::Onkey4SIMask::ACTIVE = BITS_4;
const OnkeyIntStat0::Onkey8SIMask OnkeyIntStat0::kOnkey8SIMask(BITS_5);
const uint8_t OnkeyIntStat0::Onkey8SIMask::CLEARED = BITS_NONE;
const uint8_t OnkeyIntStat0::Onkey8SIMask::ACTIVE = BITS_5;

const uint8_t OnkeyIntMask0::kRegister = 0x25;
const OnkeyIntMask0::OnkeyPushMMask OnkeyIntMask0::kOnkeyPushMMask(BITS_0);
const uint8_t OnkeyIntMask0::OnkeyPushMMask::REMOVED = BITS_NONE;
const uint8_t OnkeyIntMask0::OnkeyPushMMask::ENABLED = BITS_0;
const OnkeyIntMask0::Onkey1SMMask OnkeyIntMask0::kOnkey1SMMask(BITS_1);
const uint8_t OnkeyIntMask0::Onkey1SMMask::REMOVED = BITS_NONE;
const uint8_t OnkeyIntMask0::Onkey1SMMask::ENABLED = BITS_1;
const OnkeyIntMask0::Onkey2SMMask OnkeyIntMask0::kOnkey2SMMask(BITS_2);
const uint8_t OnkeyIntMask0::Onkey2SMMask::REMOVED = BITS_NONE;
const uint8_t OnkeyIntMask0::Onkey2SMMask::ENABLED = BITS_2;
const OnkeyIntMask0::Onkey3SMMask OnkeyIntMask0::kOnkey3SMMask(BITS_3);
const uint8_t OnkeyIntMask0::Onkey3SMMask::REMOVED = BITS_NONE;
const uint8_t OnkeyIntMask0::Onkey3SMMask::ENABLED = BITS_3;
const OnkeyIntMask0::Onkey4SMMask OnkeyIntMask0::kOnkey4SMMask(BITS_4);
const uint8_t OnkeyIntMask0::Onkey4SMMask::REMOVED = BITS_NONE;
const uint8_t OnkeyIntMask0::Onkey4SMMask::ENABLED = BITS_4;
const OnkeyIntMask0::Onkey8SMMask OnkeyIntMask0::kOnkey8SMMask(BITS_5);
const uint8_t OnkeyIntMask0::Onkey8SMMask::REMOVED = BITS_NONE;
const uint8_t OnkeyIntMask0::Onkey8SMMask::ENABLED = BITS_5;

const uint8_t OnkeyIntSense0::kRegister = 0x26;
const OnkeyIntSense0::OnkeyPushSMask OnkeyIntSense0::kOnkeyPushSMask(BITS_0);
const uint8_t OnkeyIntSense0::OnkeyPushSMask::NOT_PUSHED = BITS_NONE;
const uint8_t OnkeyIntSense0::OnkeyPushSMask::PUSHED = BITS_0;
const OnkeyIntSense0::Onkey1SSMask OnkeyIntSense0::kOnkey1SSMask(BITS_1);
const uint8_t OnkeyIntSense0::Onkey1SSMask::NOT_PUSHED = BITS_NONE;
const uint8_t OnkeyIntSense0::Onkey1SSMask::PUSHED = BITS_1;
const OnkeyIntSense0::Onkey2SSMask OnkeyIntSense0::kOnkey2SSMask(BITS_2);
const uint8_t OnkeyIntSense0::Onkey2SSMask::NOT_PUSHED = BITS_NONE;
const uint8_t OnkeyIntSense0::Onkey2SSMask::PUSHED = BITS_2;
const OnkeyIntSense0::Onkey3SSMask OnkeyIntSense0::kOnkey3SSMask(BITS_3);
const uint8_t OnkeyIntSense0::Onkey3SSMask::NOT_PUSHED = BITS_NONE;
const uint8_t OnkeyIntSense0::Onkey3SSMask::PUSHED = BITS_3;
const OnkeyIntSense0::Onkey4SSMask OnkeyIntSense0::kOnkey4SSMask(BITS_4);
const uint8_t OnkeyIntSense0::Onkey4SSMask::NOT_PUSHED = BITS_NONE;
const uint8_t OnkeyIntSense0::Onkey4SSMask::PUSHED = BITS_4;
const OnkeyIntSense0::Onkey8SSMask OnkeyIntSense0::kOnkey8SSMask(BITS_5);
const uint8_t OnkeyIntSense0::Onkey8SSMask::NOT_PUSHED = BITS_NONE;
const uint8_t OnkeyIntSense0::Onkey8SSMask::PUSHED = BITS_5;

const uint8_t MiscIntStat0::kRegister = 0x28;
const MiscIntStat0::PwrUpIMask MiscIntStat0::kPwrUpIMask(BITS_0);
const uint8_t MiscIntStat0::PwrUpIMask::NOT_ACTIVE = BITS_NONE;
const uint8_t MiscIntStat0::PwrUpIMask::ACTIVE = BITS_0;
const MiscIntStat0::PwrDnIMask MiscIntStat0::kPwrDnIMask(BITS_1);
const uint8_t MiscIntStat0::PwrDnIMask::NOT_ACTIVE = BITS_NONE;
const uint8_t MiscIntStat0::PwrDnIMask::ACTIVE = BITS_1;
const MiscIntStat0::PwrOnIMask MiscIntStat0::kPwrOnIMask(BITS_2);
const uint8_t MiscIntStat0::PwrOnIMask::NOT_ACTIVE = BITS_NONE;
const uint8_t MiscIntStat0::PwrOnIMask::ACTIVE = BITS_2;
const MiscIntStat0::LowSysWarnIMask MiscIntStat0::kLowSysWarnIMask(BITS_3);
const uint8_t MiscIntStat0::LowSysWarnIMask::NOT_ACTIVE = BITS_NONE;
const uint8_t MiscIntStat0::LowSysWarnIMask::ACTIVE = BITS_3;
const MiscIntStat0::SysOlvoIMask MiscIntStat0::kSysOlvoIMask(BITS_4);
const uint8_t MiscIntStat0::SysOlvoIMask::NOT_ACTIVE = BITS_NONE;
const uint8_t MiscIntStat0::SysOlvoIMask::ACTIVE = BITS_4;

const uint8_t MiscIntMask0::kRegister = 0x29;
const MiscIntMask0::PwrUpMMask MiscIntMask0::kPwrUpMMask(BITS_0);
const uint8_t MiscIntMask0::PwrUpMMask::REMOVED = BITS_NONE;
const uint8_t MiscIntMask0::PwrUpMMask::ENABLED = BITS_0;
const MiscIntMask0::PwrDnMMask MiscIntMask0::kPwrDnMMask(BITS_1);
const uint8_t MiscIntMask0::PwrDnMMask::REMOVED = BITS_NONE;
const uint8_t MiscIntMask0::PwrDnMMask::ENABLED = BITS_1;
const MiscIntMask0::PwrOnMMask MiscIntMask0::kPwrOnMMask(BITS_2);
const uint8_t MiscIntMask0::PwrOnMMask::REMOVED = BITS_NONE;
const uint8_t MiscIntMask0::PwrOnMMask::ENABLED = BITS_2;
const MiscIntMask0::LowSysWarnMMask MiscIntMask0::kLowSysWarnMMask(BITS_3);
const uint8_t MiscIntMask0::LowSysWarnMMask::REMOVED = BITS_NONE;
const uint8_t MiscIntMask0::LowSysWarnMMask::ENABLED = BITS_3;
const MiscIntMask0::SysOlvoMMask MiscIntMask0::kSysOlvoMMask(BITS_4);
const uint8_t MiscIntMask0::SysOlvoMMask::REMOVED = BITS_NONE;
const uint8_t MiscIntMask0::SysOlvoMMask::ENABLED = BITS_4;

const uint8_t MiscIntSense0::kRegister = 0x2A;
const MiscIntSense0::PwrUpSMask MiscIntSense0::kPwrUpSMask(BITS_0);
const uint8_t MiscIntSense0::PwrUpSMask::NOT_IN_PROGRESS = BITS_NONE;
const uint8_t MiscIntSense0::PwrUpSMask::IN_PROGRESS = BITS_0;
const MiscIntSense0::PwrDnSMask MiscIntSense0::kPwrDnSMask(BITS_1);
const uint8_t MiscIntSense0::PwrDnSMask::NOT_IN_PROGRESS = BITS_NONE;
const uint8_t MiscIntSense0::PwrDnSMask::IN_PROGRESS = BITS_1;
const MiscIntSense0::PwrOnSMask MiscIntSense0::kPwrOnSMask(BITS_2);
const uint8_t MiscIntSense0::PwrOnSMask::LOW = BITS_NONE;
const uint8_t MiscIntSense0::PwrOnSMask::HIGH = BITS_2;
const MiscIntSense0::LowSysWarnSMask MiscIntSense0::kLowSysWarnSMask(BITS_3);
const uint8_t MiscIntSense0::LowSysWarnSMask::BELOW = BITS_NONE;
const uint8_t MiscIntSense0::LowSysWarnSMask::ABOVE = BITS_3;
const MiscIntSense0::SysOlvoSMask MiscIntSense0::kSysOlvoSMask(BITS_4);
const uint8_t MiscIntSense0::SysOlvoSMask::BELOW = BITS_NONE;
const uint8_t MiscIntSense0::SysOlvoSMask::ABOVE = BITS_4;

const uint8_t CoinCellControl::kRegister = 0x30;
const CoinCellControl::VCoinMask CoinCellControl::kVCoinMask(BITS_3_2_1_0);
const uint8_t CoinCellControl::VCoinMask::_1_8 = BITS_NONE;
const uint8_t CoinCellControl::VCoinMask::_1_9 = BITS_0;
const uint8_t CoinCellControl::VCoinMask::_2_0 = BITS_1;
const uint8_t CoinCellControl::VCoinMask::_2_1 = BITS_1_0;
const uint8_t CoinCellControl::VCoinMask::_2_2 = BITS_2;
const uint8_t CoinCellControl::VCoinMask::_2_3 = BITS_2_0;
const uint8_t CoinCellControl::VCoinMask::_2_4 = BITS_2_1;
const uint8_t CoinCellControl::VCoinMask::_2_5 = BITS_2_1_0;
const uint8_t CoinCellControl::VCoinMask::_2_6 = BITS_3;
const uint8_t CoinCellControl::VCoinMask::_2_7 = BITS_3_0;
const uint8_t CoinCellControl::VCoinMask::_2_8 = BITS_3_1;
const uint8_t CoinCellControl::VCoinMask::_2_9 = BITS_3_1_0;
const uint8_t CoinCellControl::VCoinMask::_3_0 = BITS_3_2;
const uint8_t CoinCellControl::VCoinMask::_3_1 = BITS_3_2_0;
const uint8_t CoinCellControl::VCoinMask::_3_2 = BITS_3_2_1;
const uint8_t CoinCellControl::VCoinMask::_3_3 = BITS_3_2_1_0;
const CoinCellControl::ChEnMask CoinCellControl::kChEnMask(BITS_4);
const uint8_t CoinCellControl::ChEnMask::DISABLED = BITS_NONE;
const uint8_t CoinCellControl::ChEnMask::ENABLED = BITS_4;

const uint8_t VSNVSCtrl::kRegister = 0x48;
const VSNVSCtrl::CLKPulseMask VSNVSCtrl::kCLKPulseMask(BITS_3);
const VSNVSCtrl::ForceBOSMask VSNVSCtrl::kForceBOSMask(BITS_4);
const uint8_t VSNVSCtrl::ForceBOSMask::FORCED = BITS_4;
const uint8_t VSNVSCtrl::ForceBOSMask::ONLY_VSYS_LT_VDIV = BITS_NONE;
const VSNVSCtrl::LiBGDisMask VSNVSCtrl::kLiBGDisMask(BITS_4);
const uint8_t VSNVSCtrl::LiBGDisMask::VSNVS_BAND_GAP_DISABLED = BITS_NONE;
const uint8_t VSNVSCtrl::LiBGDisMask::VSNVS_BAND_GAP_ENABLED = BITS_5;

const uint8_t VREFDDRCtrl::kRegister = 0x4A;
const VREFDDRCtrl::VREFDDREnMask VREFDDRCtrl::kVREFDDREnMask(BITS_0);
const uint8_t VREFDDRCtrl::VREFDDREnMask::ENABLE = BITS_0;
const uint8_t VREFDDRCtrl::VREFDDREnMask::DISABLE = BITS_NONE;
const VREFDDRCtrl::VREFDDRStbyEnMask VREFDDRCtrl::kVREFDDRStbyEnMask(BITS_1);
const uint8_t VREFDDRCtrl::VREFDDRStbyEnMask::ENABLE = BITS_1;
const uint8_t VREFDDRCtrl::VREFDDRStbyEnMask::DISABLE = BITS_NONE;
const VREFDDRCtrl::VREFDDROModeMask VREFDDRCtrl::kVREFDDROModeMask(BITS_2);
const uint8_t VREFDDRCtrl::VREFDDROModeMask::ENABLE = BITS_2;
const uint8_t VREFDDRCtrl::VREFDDROModeMask::DISABLE = BITS_NONE;
const VREFDDRCtrl::VREFDDRLPwrMask VREFDDRCtrl::kVREFDDRLPwrMask(BITS_3);
const uint8_t VREFDDRCtrl::VREFDDRLPwrMask::ENABLE = BITS_3;
const uint8_t VREFDDRCtrl::VREFDDRLPwrMask::DISABLE = BITS_NONE;

const uint8_t VREFDDRPwrDnSeq::kRegister = 0x65;
const VREFDDRPwrDnSeq::VREFDDRPwrDnSeqMask
    VREFDDRPwrDnSeq::kVREFDDRPwrDnSeqMask(BITS_2_1_0);

// TODO(kendall): Figure out the right register. This conflicts with RC_16MHz
const uint8_t Key1::kRegister = 0x6B;
const Key1::Key1Mask Key1::kKey1Mask(BITS_2_1_0);
// End Misc.h

// Charger.h
static const uint8_t SPECIFIC_REGISTER_OFFSET = 0x80;

const uint8_t ChgInt::kRegister = 0x00 + SPECIFIC_REGISTER_OFFSET;
const ChgInt::SupIMask ChgInt::kSupIMask(BITS_0);
const uint8_t ChgInt::SupIMask::CLEARED = BITS_NONE;
const uint8_t ChgInt::SupIMask::ACTIVE = BITS_0;
const ChgInt::Bat2SocIMask ChgInt::kBat2SocIMask(BITS_1);
const uint8_t ChgInt::Bat2SocIMask::CLEARED = BITS_NONE;
const uint8_t ChgInt::Bat2SocIMask::ACTIVE = BITS_1;
const ChgInt::BatIMask ChgInt::kBatIMask(BITS_2);
const uint8_t ChgInt::BatIMask::CLEARED = BITS_NONE;
const uint8_t ChgInt::BatIMask::ACTIVE = BITS_2;
const ChgInt::ChgIMask ChgInt::kChgIMask(BITS_3);
const uint8_t ChgInt::ChgIMask::CLEARED = BITS_NONE;
const uint8_t ChgInt::ChgIMask::ACTIVE = BITS_3;
const ChgInt::VbusIMask ChgInt::kVbusIMask(BITS_5);
const uint8_t ChgInt::VbusIMask::CLEARED = BITS_NONE;
const uint8_t ChgInt::VbusIMask::ACTIVE = BITS_5;
const ChgInt::VbusDpmIMask ChgInt::kVbusDpmIMask(BITS_6);
const uint8_t ChgInt::VbusDpmIMask::CLEARED = BITS_NONE;
const uint8_t ChgInt::VbusDpmIMask::ACTIVE = BITS_6;
const ChgInt::ThmIMask ChgInt::kThmIMask(BITS_7);
const uint8_t ChgInt::ThmIMask::CLEARED = BITS_NONE;
const uint8_t ChgInt::ThmIMask::ACTIVE = BITS_7;

const uint8_t ChgIntOk::kRegister = 0x04 + SPECIFIC_REGISTER_OFFSET;
const ChgIntOk::SupOkMask ChgIntOk::kSupOkMask(BITS_0);
const uint8_t ChgIntOk::SupOkMask::NOT_DETECTED = BITS_NONE;
const uint8_t ChgIntOk::SupOkMask::DETECTED = BITS_0;
const ChgIntOk::Bat2SocOkMask ChgIntOk::kBat2SocOkMask(BITS_1);
const uint8_t ChgIntOk::Bat2SocOkMask::NOT_OVERCURRENT = BITS_NONE;
const uint8_t ChgIntOk::Bat2SocOkMask::OVERCURRENT = BITS_1;
const ChgIntOk::BatOkMask ChgIntOk::kBatOkMask(BITS_2);
const uint8_t ChgIntOk::BatOkMask::BAT_ISSUE = BITS_NONE;
const uint8_t ChgIntOk::BatOkMask::BAT_OK = BITS_2;
const ChgIntOk::ChgOkMask ChgIntOk::kChgOkMask(BITS_3);
const uint8_t ChgIntOk::ChgOkMask::NOT_CHARGING = BITS_NONE;
const uint8_t ChgIntOk::ChgOkMask::CHG_OK = BITS_3;
const ChgIntOk::VbusOkMask ChgIntOk::kVbusOkMask(BITS_5);
const uint8_t ChgIntOk::VbusOkMask::INVALID = BITS_NONE;
const uint8_t ChgIntOk::VbusOkMask::VALID = BITS_5;
const ChgIntOk::VbusDpmOkMask ChgIntOk::kVbusDpmOkMask(BITS_6);
const uint8_t ChgIntOk::VbusDpmOkMask::NO_DPM = BITS_NONE;
const uint8_t ChgIntOk::VbusDpmOkMask::DPM = BITS_6;
const ChgIntOk::ThmOkMask ChgIntOk::kThmOkMask(BITS_7);
const uint8_t ChgIntOk::ThmOkMask::OUTSIDE_THRESHOLD = BITS_NONE;
const uint8_t ChgIntOk::ThmOkMask::WITHIN_THRESHOLD = BITS_7;

const uint8_t VbusSns::kRegister = 0x06 + SPECIFIC_REGISTER_OFFSET;
const VbusSns::VbusUvloSnsMask VbusSns::kVbusUvloSnsMask(BITS_2);
const uint8_t VbusSns::VbusUvloSnsMask::VBUS_GT_UVLO = BITS_NONE;
const uint8_t VbusSns::VbusUvloSnsMask::VBUS_DETACHED = BITS_2;
const VbusSns::VbusIn2SysSnsMask VbusSns::kVbusIn2SysSnsMask(BITS_3);
const uint8_t VbusSns::VbusIn2SysSnsMask::GT = BITS_NONE;
const uint8_t VbusSns::VbusIn2SysSnsMask::LT = BITS_3;
const VbusSns::VbusOvloSnsMask VbusSns::kVbusOvloSnsMask(BITS_4);
const uint8_t VbusSns::VbusOvloSnsMask::GT = BITS_NONE;
const uint8_t VbusSns::VbusOvloSnsMask::LT = BITS_4;
const VbusSns::VbusValidMask VbusSns::kVbusValidMask(BITS_5);
const uint8_t VbusSns::VbusValidMask::INVALID = BITS_NONE;
const uint8_t VbusSns::VbusValidMask::VALID = BITS_5;
const VbusSns::VbusDpmSnsMask VbusSns::kVbusDpmSnsMask(BITS_7);
const uint8_t VbusSns::VbusDpmSnsMask::NOT_TRIGGERED = BITS_NONE;
const uint8_t VbusSns::VbusDpmSnsMask::TRIGGERED = BITS_7;

const uint8_t ChgSns::kRegister = 0x07 + SPECIFIC_REGISTER_OFFSET;
const ChgSns::ChgSnsMask ChgSns::kChgSnsMask(BITS_3_2_1_0);
const uint8_t ChgSns::ChgSnsMask::PRECHARGE = BITS_NONE;
const uint8_t ChgSns::ChgSnsMask::FAST_CHARGE_CC = BITS_0;
const uint8_t ChgSns::ChgSnsMask::FAST_CHARGE_CV = BITS_1;
const uint8_t ChgSns::ChgSnsMask::END_OF_CHARGE = BITS_1_0;
const uint8_t ChgSns::ChgSnsMask::DONE = BITS_2;
const uint8_t ChgSns::ChgSnsMask::TIMER_FAULT = BITS_2_1;
const uint8_t ChgSns::ChgSnsMask::THERMISTOR_SUSPEND = BITS_2_1_0;
const uint8_t ChgSns::ChgSnsMask::OFF_INVALID_OR_DISABLED = BITS_3;
const uint8_t ChgSns::ChgSnsMask::OVERVOLTAGE = BITS_3_0;
const uint8_t ChgSns::ChgSnsMask::CHG_THERMAL_OFF = BITS_3_1;
const uint8_t ChgSns::ChgSnsMask::LINEAR_ONLY_NO_CHARGE = BITS_3_2;
const ChgSns::WdtSnsMask ChgSns::kWdtSnsMask(BITS_5);
const uint8_t ChgSns::WdtSnsMask::WATCHDOG_NOT_EXPIRED = BITS_NONE;
const uint8_t ChgSns::WdtSnsMask::CHG_OFF_WATCHDOG = BITS_5;
const ChgSns::ThmSnsMask ChgSns::kThmSnsMask(BITS_6);
const uint8_t ChgSns::ThmSnsMask::OUTSIDE_THRESHOLDS = BITS_NONE;
const uint8_t ChgSns::ThmSnsMask::WITHIN_THRESHOLDS = BITS_5;
const ChgSns::TregSnsMask ChgSns::kTregSnsMask(BITS_7);
const uint8_t ChgSns::TregSnsMask::LESS_THAN_THRESHOLD = BITS_NONE;
const uint8_t ChgSns::TregSnsMask::GREATER_THAN_THRESHOLD = BITS_7;

const uint8_t BattSns::kRegister = 0x08 + SPECIFIC_REGISTER_OFFSET;
const BattSns::BattSnsMask BattSns::kBattSnsMask(BITS_2_1_0);
const uint8_t BattSns::BattSnsMask::VBUS_INVALID = BITS_NONE;
const uint8_t BattSns::BattSnsMask::VBATT_LT_PRECHG = BITS_0;
const uint8_t BattSns::BattSnsMask::CHG_SUSPENDED = BITS_1;
const uint8_t BattSns::BattSnsMask::VBATT_GT_PRECHG = BITS_2;
const uint8_t BattSns::BattSnsMask::OVERVOLTAGE = BITS_2_0;
const uint8_t BattSns::BattSnsMask::NOT_DETECTED = BITS_2_1;
const BattSns::BattOCSnsMask BattSns::kBattOCSnsMask(BITS_5);
const uint8_t BattSns::BattOCSnsMask::NOFAULT = BITS_NONE;
const uint8_t BattSns::BattOCSnsMask::FAULT = BITS_5;

const uint8_t ChgOper::kRegister = 0x09 + SPECIFIC_REGISTER_OFFSET;
const ChgOper::ChgOperMask ChgOper::kChgOperMask(BITS_1_0);
const uint8_t ChgOper::ChgOperMask::CHG_OFF_LINEAR_OFF = BITS_NONE;
const uint8_t ChgOper::ChgOperMask::CHG_OFF_LINEAR_ON = BITS_0;
const uint8_t ChgOper::ChgOperMask::CHG_ON_LINEAR_ON = BITS_1;
const ChgOper::WdtEnMask ChgOper::kWdtEnMask(BITS_3);
const uint8_t ChgOper::WdtEnMask::WATCHDOG_DISABLED = BITS_NONE;
const uint8_t ChgOper::WdtEnMask::WATCHDOG_ENABLED = BITS_3;
const ChgOper::DisBattFetMask ChgOper::kDisBattFetMask(BITS_4);
const uint8_t ChgOper::DisBattFetMask::FET_STATEMACHINE = BITS_NONE;
const uint8_t ChgOper::DisBattFetMask::FET_FORCED_OFF = BITS_4;

const uint8_t ChgTmr::kRegister = 0x0A + SPECIFIC_REGISTER_OFFSET;
const ChgTmr::FChgTimeMask ChgTmr::kFChgTimeMask(BITS_2_1_0);
const uint8_t ChgTmr::FChgTimeMask::DISABLE = BITS_NONE;
const uint8_t ChgTmr::FChgTimeMask::_2HR = BITS_0;
const uint8_t ChgTmr::FChgTimeMask::_4HR = BITS_1;
const uint8_t ChgTmr::FChgTimeMask::_6HR = BITS_1_0;
const uint8_t ChgTmr::FChgTimeMask::_8HR = BITS_2;
const uint8_t ChgTmr::FChgTimeMask::_10HR = BITS_2_0;
const uint8_t ChgTmr::FChgTimeMask::_12HR = BITS_2_1;
const uint8_t ChgTmr::FChgTimeMask::_14HR = BITS_2_1_0;
const ChgTmr::EoCTimeMask ChgTmr::kEoCTimeMask(BITS_5_4_3);
const uint8_t ChgTmr::EoCTimeMask::_0M = BITS_NONE;
const uint8_t ChgTmr::EoCTimeMask::_10M = BITS_3;
const uint8_t ChgTmr::EoCTimeMask::_20M = BITS_4;
const uint8_t ChgTmr::EoCTimeMask::_30M = BITS_4_3;
const uint8_t ChgTmr::EoCTimeMask::_40M = BITS_5;
const uint8_t ChgTmr::EoCTimeMask::_50M = BITS_5_3;
const uint8_t ChgTmr::EoCTimeMask::_60M = BITS_5_4;
const uint8_t ChgTmr::EoCTimeMask::_70M = BITS_2_1_0;
const ChgTmr::TPreChgMask ChgTmr::kTPreChgMask(BITS_7);
const uint8_t ChgTmr::TPreChgMask::_30M = BITS_NONE;
const uint8_t ChgTmr::TPreChgMask::_45M = BITS_7;

const uint8_t ChgEoCCnfg::kRegister = 0x0D + SPECIFIC_REGISTER_OFFSET;
const ChgEoCCnfg::ChgRestartMask ChgEoCCnfg::kChgRestartMask(BITS_1_0);
const uint8_t ChgEoCCnfg::ChgRestartMask::_100MV = BITS_NONE;
const uint8_t ChgEoCCnfg::ChgRestartMask::_150MV = BITS_0;
const uint8_t ChgEoCCnfg::ChgRestartMask::_200MV = BITS_1;
const uint8_t ChgEoCCnfg::ChgRestartMask::DISABLED = BITS_1_0;
const ChgEoCCnfg::IEoCMask ChgEoCCnfg::kIEoCMask(BITS_6_5_4);
const uint8_t ChgEoCCnfg::IEoCMask::_5MA = BITS_NONE;
const uint8_t ChgEoCCnfg::IEoCMask::_10MA = BITS_4;
const uint8_t ChgEoCCnfg::IEoCMask::_20MA = BITS_5;
const uint8_t ChgEoCCnfg::IEoCMask::_30MA = BITS_5_4;
const uint8_t ChgEoCCnfg::IEoCMask::_50MA = BITS_6;

const uint8_t ChgCurrCnfg::kRegister = 0x0E + SPECIFIC_REGISTER_OFFSET;
const ChgCurrCnfg::ChgCcMask ChgCurrCnfg::kChgCcMask(BITS_4_3_2_1_0);
const uint8_t ChgCurrCnfg::ChgCcMask::_100MA = BITS_NONE;
const uint8_t ChgCurrCnfg::ChgCcMask::_150MA = BITS_0;
const uint8_t ChgCurrCnfg::ChgCcMask::_200MA = BITS_1;
const uint8_t ChgCurrCnfg::ChgCcMask::_250MA = BITS_1_0;
const uint8_t ChgCurrCnfg::ChgCcMask::_300MA = BITS_2;
const uint8_t ChgCurrCnfg::ChgCcMask::_350MA = BITS_2_0;
const uint8_t ChgCurrCnfg::ChgCcMask::_400MA = BITS_2_1;
const uint8_t ChgCurrCnfg::ChgCcMask::_450MA = BITS_2_1_0;
const uint8_t ChgCurrCnfg::ChgCcMask::_500MA = BITS_3;
const uint8_t ChgCurrCnfg::ChgCcMask::_550MA = BITS_3_0;
const uint8_t ChgCurrCnfg::ChgCcMask::_600MA = BITS_3_1;
const uint8_t ChgCurrCnfg::ChgCcMask::_650MA = BITS_3_1_0;
const uint8_t ChgCurrCnfg::ChgCcMask::_700MA = BITS_3_2;
const uint8_t ChgCurrCnfg::ChgCcMask::_750MA = BITS_3_2_0;
const uint8_t ChgCurrCnfg::ChgCcMask::_800MA = BITS_3_2_1;
const uint8_t ChgCurrCnfg::ChgCcMask::_850MA = BITS_3_2_1_0;
const uint8_t ChgCurrCnfg::ChgCcMask::_900MA = BITS_4;
const uint8_t ChgCurrCnfg::ChgCcMask::_950MA = BITS_4_0;
const uint8_t ChgCurrCnfg::ChgCcMask::_1000MA = BITS_4_1;
const ChgCurrCnfg::PreChgLbThrsMask ChgCurrCnfg::kPreChgLbThrsMask(BITS_6_5);
const uint8_t ChgCurrCnfg::PreChgLbThrsMask::_2_8V = BITS_NONE;
const uint8_t ChgCurrCnfg::PreChgLbThrsMask::_2_7V = BITS_5;
const uint8_t ChgCurrCnfg::PreChgLbThrsMask::_2_9V = BITS_6;
const uint8_t ChgCurrCnfg::PreChgLbThrsMask::_3_0V = BITS_6_5;

const uint8_t BattReg::kRegister = 0x0F + SPECIFIC_REGISTER_OFFSET;
const BattReg::ChgCvMask BattReg::kChgCvMask(BITS_5_4_3_2_1_0);
const uint8_t BattReg::ChgCvMask::_3_50V = BITS_NONE;
const uint8_t BattReg::ChgCvMask::_3_50V_1 = BITS_0;
const uint8_t BattReg::ChgCvMask::_3_50V_2 = BITS_1;
const uint8_t BattReg::ChgCvMask::_3_50V_3 = BITS_1_0;
const uint8_t BattReg::ChgCvMask::_3_50V_4 = BITS_2;
const uint8_t BattReg::ChgCvMask::_3_50V_5 = BITS_2_0;
const uint8_t BattReg::ChgCvMask::_3_50V_6 = BITS_2_1;
const uint8_t BattReg::ChgCvMask::_3_50V_7 = BITS_2_1_0;
const uint8_t BattReg::ChgCvMask::_3_50V_8 = BITS_3;
const uint8_t BattReg::ChgCvMask::_3_52V = BITS_3_0;
const uint8_t BattReg::ChgCvMask::_3_54V = BITS_3_1;
const uint8_t BattReg::ChgCvMask::_3_56V = BITS_3_1_0;
const uint8_t BattReg::ChgCvMask::_3_58V = BITS_3_2;
const uint8_t BattReg::ChgCvMask::_3_60V = BITS_3_2_0;
const uint8_t BattReg::ChgCvMask::_3_62V = BITS_3_2_1;
const uint8_t BattReg::ChgCvMask::_3_64V = BITS_3_2_1_0;
const uint8_t BattReg::ChgCvMask::_3_66V = BITS_4;
const uint8_t BattReg::ChgCvMask::_3_68V = BITS_4_0;
const uint8_t BattReg::ChgCvMask::_3_70V = BITS_4_1;
const uint8_t BattReg::ChgCvMask::_3_72V = BITS_4_1_0;
const uint8_t BattReg::ChgCvMask::_3_74V = BITS_4_2;
const uint8_t BattReg::ChgCvMask::_3_76V = BITS_4_2_0;
const uint8_t BattReg::ChgCvMask::_3_78V = BITS_4_2_1;
const uint8_t BattReg::ChgCvMask::_3_80V = BITS_4_2_1_0;
const uint8_t BattReg::ChgCvMask::_3_82V = BITS_4_3;
const uint8_t BattReg::ChgCvMask::_3_84V = BITS_4_3_0;
const uint8_t BattReg::ChgCvMask::_3_86V = BITS_4_3_1;
const uint8_t BattReg::ChgCvMask::_3_88V = BITS_4_3_1_0;
const uint8_t BattReg::ChgCvMask::_3_90V = BITS_4_3_2;
const uint8_t BattReg::ChgCvMask::_3_92V = BITS_4_3_2_0;
const uint8_t BattReg::ChgCvMask::_3_94V = BITS_4_3_2_1;
const uint8_t BattReg::ChgCvMask::_3_96V = BITS_4_3_2_1_0;
const uint8_t BattReg::ChgCvMask::_3_98V = BITS_5;
const uint8_t BattReg::ChgCvMask::_4_00V = BITS_5_0;
const uint8_t BattReg::ChgCvMask::_4_02V = BITS_5_1;
const uint8_t BattReg::ChgCvMask::_4_04V = BITS_5_1_0;
const uint8_t BattReg::ChgCvMask::_4_06V = BITS_5_2;
const uint8_t BattReg::ChgCvMask::_4_08V = BITS_5_2_0;
const uint8_t BattReg::ChgCvMask::_4_10V = BITS_5_2_1;
const uint8_t BattReg::ChgCvMask::_4_12V = BITS_5_2_1_0;
const uint8_t BattReg::ChgCvMask::_4_14V = BITS_5_3;
const uint8_t BattReg::ChgCvMask::_4_16V = BITS_5_3_0;
const uint8_t BattReg::ChgCvMask::_4_18V = BITS_5_3_1;
const uint8_t BattReg::ChgCvMask::_4_20V = BITS_5_3_1_0;
const uint8_t BattReg::ChgCvMask::_4_22V = BITS_5_3_2;
const uint8_t BattReg::ChgCvMask::_4_24V = BITS_5_3_2_0;
const uint8_t BattReg::ChgCvMask::_4_26V = BITS_5_3_2_1;
const uint8_t BattReg::ChgCvMask::_4_28V = BITS_5_3_2_1_0;
const uint8_t BattReg::ChgCvMask::_4_30V = BITS_5_4;
const uint8_t BattReg::ChgCvMask::_4_32V = BITS_5_4_0;
const uint8_t BattReg::ChgCvMask::_4_34V = BITS_5_4_1;
const uint8_t BattReg::ChgCvMask::_4_36V = BITS_5_4_1_0;
const uint8_t BattReg::ChgCvMask::_4_38V = BITS_5_4_2;
const uint8_t BattReg::ChgCvMask::_4_40V = BITS_5_4_2_0;
const uint8_t BattReg::ChgCvMask::_4_42V = BITS_5_4_2_1;
const uint8_t BattReg::ChgCvMask::_4_44V = BITS_5_4_2_1_0;
const uint8_t BattReg::ChgCvMask::_4_44V_1 = BITS_5_4_3;
const uint8_t BattReg::ChgCvMask::_4_44V_2 = BITS_5_4_3_0;
const uint8_t BattReg::ChgCvMask::_4_44V_3 = BITS_5_4_3_1;
const uint8_t BattReg::ChgCvMask::_4_44V_4 = BITS_5_4_3_1_0;
const uint8_t BattReg::ChgCvMask::_4_44V_5 = BITS_5_4_3_2;
const uint8_t BattReg::ChgCvMask::_4_44V_6 = BITS_5_4_3_2_0;
const uint8_t BattReg::ChgCvMask::_4_44V_7 = BITS_5_4_3_2_1;
const uint8_t BattReg::ChgCvMask::_4_44V_8 = BITS_5_4_3_2_1_0;
const BattReg::VsysMinMask BattReg::kVsysMinMask(BITS_7_6);
const uint8_t BattReg::VsysMinMask::_3_5V = BITS_NONE;
const uint8_t BattReg::VsysMinMask::_3_7V = BITS_6;
const uint8_t BattReg::VsysMinMask::_4_3V = BITS_7;

const uint8_t BattFetCnfg::kRegister = 0x11 + SPECIFIC_REGISTER_OFFSET;
const BattFetCnfg::WdtClrMask BattFetCnfg::kWdtClrMask(BITS_1_0);
const uint8_t BattFetCnfg::WdtClrMask::NOT_CLEARED = BITS_NONE;
const uint8_t BattFetCnfg::WdtClrMask::CLEARED = BITS_0;
const uint8_t BattFetCnfg::WdtClrMask::NOT_CLEARED_1 = BITS_1;
const uint8_t BattFetCnfg::WdtClrMask::NOT_CLEARED_2 = BITS_1_0;
const BattFetCnfg::BOVRCDisBattFetMask
    BattFetCnfg::kBOVRCDisBattFetMask(BITS_3);
const uint8_t BattFetCnfg::BOVRCDisBattFetMask::CHARGER_CONTROLLED = BITS_NONE;
const uint8_t BattFetCnfg::BOVRCDisBattFetMask::NOT_TURNED_OFF_BY_OVC = BITS_3;
const BattFetCnfg::BattFetOCMask BattFetCnfg::kBattFetOCMask(BITS_5_4);
const uint8_t BattFetCnfg::BattFetOCMask::DISABLED = BITS_NONE;
const uint8_t BattFetCnfg::BattFetOCMask::_2_2A = BITS_4;
const uint8_t BattFetCnfg::BattFetOCMask::_2_8A = BITS_5;
const uint8_t BattFetCnfg::BattFetOCMask::_3_2A = BITS_5_4;
const BattFetCnfg::WdTimeMask BattFetCnfg::kWdTimeMask(BITS_6);
const uint8_t BattFetCnfg::WdTimeMask::_80s = BITS_NONE;
const uint8_t BattFetCnfg::WdTimeMask::_32s = BITS_6;
const BattFetCnfg::BOVRCNoVBusMask BattFetCnfg::kBOVRCNoVBusMask(BITS_7);
const uint8_t BattFetCnfg::BOVRCNoVBusMask::ENABLED = BITS_7;
const uint8_t BattFetCnfg::BOVRCNoVBusMask::DISABLED = BITS_NONE;

const uint8_t ThmRegCnfg::kRegister = 0x12 + SPECIFIC_REGISTER_OFFSET;
const ThmRegCnfg::ThmCnfgMask ThmRegCnfg::kThmCnfgMask(BITS_1_0);
const uint8_t ThmRegCnfg::ThmCnfgMask::THM_DOES_NOT_CONTROL = BITS_NONE;
const uint8_t ThmRegCnfg::ThmCnfgMask::THM_CONTROLS = BITS_0;
const uint8_t ThmRegCnfg::ThmCnfgMask::JEITA1 = BITS_1;
const uint8_t ThmRegCnfg::ThmCnfgMask::JEITA2 = BITS_1_0;
const ThmRegCnfg::RegTempMask ThmRegCnfg::kRegTempMask(BITS_3_2);
const uint8_t ThmRegCnfg::RegTempMask::_80C = BITS_NONE;
const uint8_t ThmRegCnfg::RegTempMask::_95C = BITS_2;
const uint8_t ThmRegCnfg::RegTempMask::_110C = BITS_3;
const uint8_t ThmRegCnfg::RegTempMask::_125C = BITS_3_2;
const ThmRegCnfg::ThmColdMask ThmRegCnfg::kThmColdMask(BITS_4);
const uint8_t ThmRegCnfg::ThmColdMask::_MINUS_10C = BITS_4;
const uint8_t ThmRegCnfg::ThmColdMask::_0C = BITS_NONE;
const ThmRegCnfg::ThmHotMask ThmRegCnfg::kThmHotMask(BITS_5);
const uint8_t ThmRegCnfg::ThmHotMask::_55C = BITS_5;
const uint8_t ThmRegCnfg::ThmHotMask::_60C = BITS_NONE;
const ThmRegCnfg::TempFbEnMask ThmRegCnfg::kTempFbEnMask(BITS_7);
const uint8_t ThmRegCnfg::TempFbEnMask::DISABLED = BITS_NONE;
const uint8_t ThmRegCnfg::TempFbEnMask::ENABLED = BITS_7;

const uint8_t VbusInLimCnfg::kRegister = 0x14 + SPECIFIC_REGISTER_OFFSET;
const VbusInLimCnfg::VbusLinILimMask
    VbusInLimCnfg::kVbusLinILimMask(BITS_7_6_5_4_3);
const uint8_t VbusInLimCnfg::VbusLinILimMask::_10MA = BITS_NONE;
const uint8_t VbusInLimCnfg::VbusLinILimMask::_15MA = BITS_3;
const uint8_t VbusInLimCnfg::VbusLinILimMask::_20MA = BITS_4;
const uint8_t VbusInLimCnfg::VbusLinILimMask::_25MA = BITS_4_3;
const uint8_t VbusInLimCnfg::VbusLinILimMask::_30MA = BITS_5;
const uint8_t VbusInLimCnfg::VbusLinILimMask::_35MA = BITS_5_3;
const uint8_t VbusInLimCnfg::VbusLinILimMask::_40MA = BITS_5_4;
const uint8_t VbusInLimCnfg::VbusLinILimMask::_45MA = BITS_5_4_3;
const uint8_t VbusInLimCnfg::VbusLinILimMask::_50MA = BITS_6;
const uint8_t VbusInLimCnfg::VbusLinILimMask::_100MA = BITS_6_3;
const uint8_t VbusInLimCnfg::VbusLinILimMask::_150MA = BITS_6_4;
const uint8_t VbusInLimCnfg::VbusLinILimMask::_200MA = BITS_6_4_3;
const uint8_t VbusInLimCnfg::VbusLinILimMask::_300MA = BITS_6_5;
const uint8_t VbusInLimCnfg::VbusLinILimMask::_400MA = BITS_6_5_3;
const uint8_t VbusInLimCnfg::VbusLinILimMask::_500MA = BITS_6_5_4;
const uint8_t VbusInLimCnfg::VbusLinILimMask::_600MA = BITS_6_5_4_3;
const uint8_t VbusInLimCnfg::VbusLinILimMask::_700MA = BITS_7;
const uint8_t VbusInLimCnfg::VbusLinILimMask::_800MA = BITS_7_3;
const uint8_t VbusInLimCnfg::VbusLinILimMask::_900MA = BITS_7_4;
const uint8_t VbusInLimCnfg::VbusLinILimMask::_1000MA = BITS_7_4_3;
const uint8_t VbusInLimCnfg::VbusLinILimMask::_1500MA = BITS_7_5;

const uint8_t VbusLinDpm::kRegister = 0x15 + SPECIFIC_REGISTER_OFFSET;
const VbusLinDpm::VbusDpmRegMask VbusLinDpm::kVbusDpmRegMask(BITS_2_1_0);
const uint8_t VbusLinDpm::VbusDpmRegMask::_3_9V = BITS_NONE;
const uint8_t VbusLinDpm::VbusDpmRegMask::_4_0V = BITS_0;
const uint8_t VbusLinDpm::VbusDpmRegMask::_4_1V = BITS_1;
const uint8_t VbusLinDpm::VbusDpmRegMask::_4_2V = BITS_1_0;
const uint8_t VbusLinDpm::VbusDpmRegMask::_4_3V = BITS_2;
const uint8_t VbusLinDpm::VbusDpmRegMask::_4_4V = BITS_2_0;
const uint8_t VbusLinDpm::VbusDpmRegMask::_4_5V = BITS_2_1;
const uint8_t VbusLinDpm::VbusDpmRegMask::_4_6V = BITS_2_1_0;
const VbusLinDpm::PreChgdBattThrshMask
    VbusLinDpm::kPreChgdBattThrshMask(BITS_4_3);
const VbusLinDpm::VinDpmStopMask VbusLinDpm::kVinDpmStopMask(BITS_5);
const uint8_t VbusLinDpm::VinDpmStopMask::_200MV = BITS_NONE;
const uint8_t VbusLinDpm::VinDpmStopMask::_250MV = BITS_5;
const VbusLinDpm::FetScaleMask VbusLinDpm::kFetScaleMask(BITS_7);

const uint8_t UsbPhyLdoCnfg::kRegister = 0x16 + SPECIFIC_REGISTER_OFFSET;
const UsbPhyLdoCnfg::ActDisPhyMask UsbPhyLdoCnfg::kActDisPhyMask(BITS_0);
const uint8_t UsbPhyLdoCnfg::ActDisPhyMask::NO_DISCHARGE = BITS_NONE;
const uint8_t UsbPhyLdoCnfg::ActDisPhyMask::DISCHARGE = BITS_0;
const UsbPhyLdoCnfg::UsbPhyMask UsbPhyLdoCnfg::kUsbPhyMask(BITS_1);
const uint8_t UsbPhyLdoCnfg::UsbPhyMask::_3_3V = BITS_NONE;
const uint8_t UsbPhyLdoCnfg::UsbPhyMask::_4_9V = BITS_1;
const UsbPhyLdoCnfg::UsbPhyLdoMask UsbPhyLdoCnfg::kUsbPhyLdoMask(BITS_2);
const uint8_t UsbPhyLdoCnfg::UsbPhyLdoMask::DISABLED = BITS_NONE;
const uint8_t UsbPhyLdoCnfg::UsbPhyLdoMask::ENABLED = BITS_2;

const uint8_t DbncDelayTime::kRegister = 0x19 + SPECIFIC_REGISTER_OFFSET;
const DbncDelayTime::VbusOvTdbMask DbncDelayTime::kVbusOvTdbMask(BITS_1_0);
const uint8_t DbncDelayTime::VbusOvTdbMask::_10US = BITS_NONE;
const uint8_t DbncDelayTime::VbusOvTdbMask::_100US = BITS_0;
const uint8_t DbncDelayTime::VbusOvTdbMask::_1MS = BITS_1;
const uint8_t DbncDelayTime::VbusOvTdbMask::_10MS = BITS_1_0;
const DbncDelayTime::UsbPhyTdbMask DbncDelayTime::kUsbPhyTdbMask(BITS_3_2);
const uint8_t DbncDelayTime::UsbPhyTdbMask::_0MS = BITS_NONE;
const uint8_t DbncDelayTime::UsbPhyTdbMask::_16MS = BITS_2;
const uint8_t DbncDelayTime::UsbPhyTdbMask::_32MS = BITS_3;
const DbncDelayTime::SysWkUpDlyMask DbncDelayTime::kSysWkUpDlyMask(BITS_5_4);
const uint8_t DbncDelayTime::SysWkUpDlyMask::_8MS = BITS_NONE;
const uint8_t DbncDelayTime::SysWkUpDlyMask::_16MS = BITS_4;
const uint8_t DbncDelayTime::SysWkUpDlyMask::_32MS = BITS_5;
const uint8_t DbncDelayTime::SysWkUpDlyMask::_100MS = BITS_5_4;

const uint8_t ChgIntCnfg::kRegister = 0x19 + SPECIFIC_REGISTER_OFFSET;
const ChgIntCnfg::ChgIntGenMask ChgIntCnfg::kChgIntGenMask(BITS_0);
const uint8_t ChgIntCnfg::ChgIntGenMask::INT_ONLY_FC_TO_CV = BITS_NONE;
const uint8_t ChgIntCnfg::ChgIntGenMask::INT_ON_TRANSITION = BITS_0;
const ChgIntCnfg::EoCIntMask ChgIntCnfg::kEoCIntMask(BITS_1);
const uint8_t ChgIntCnfg::EoCIntMask::NO_EOC_INT = BITS_NONE;
const uint8_t ChgIntCnfg::EoCIntMask::EOC_INT = BITS_1;

const uint8_t ThmAdjSetting::kRegister = 0x1A + SPECIFIC_REGISTER_OFFSET;
const ThmAdjSetting::ThmWarmMask ThmAdjSetting::kThmWarmMask(BITS_0);
const uint8_t ThmAdjSetting::ThmWarmMask::_45C = BITS_NONE;
const uint8_t ThmAdjSetting::ThmWarmMask::_50C = BITS_0;
const ThmAdjSetting::ThmCoolMask ThmAdjSetting::kThmCoolMask(BITS_1);
const uint8_t ThmAdjSetting::ThmCoolMask::_15C = BITS_NONE;
const uint8_t ThmAdjSetting::ThmCoolMask::_10C = BITS_1;
const ThmAdjSetting::CvAdjMask ThmAdjSetting::kCvAdjMask(BITS_3_2);
const uint8_t ThmAdjSetting::CvAdjMask::_60MV = BITS_NONE;
const uint8_t ThmAdjSetting::CvAdjMask::_100MV = BITS_2;
const uint8_t ThmAdjSetting::CvAdjMask::_160MV = BITS_3;
const uint8_t ThmAdjSetting::CvAdjMask::_200MV = BITS_3_2;
const ThmAdjSetting::CcAdjMask ThmAdjSetting::kCcAdjMask(BITS_5_4);
const uint8_t ThmAdjSetting::CcAdjMask::_25PCT = BITS_NONE;
const uint8_t ThmAdjSetting::CcAdjMask::_50PCT = BITS_4;
const uint8_t ThmAdjSetting::CcAdjMask::_75PCT = BITS_5;
const uint8_t ThmAdjSetting::CcAdjMask::_100PCT = BITS_5_4;